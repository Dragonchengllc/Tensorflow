# 2022-1-4
# dragon——cheng
# function: keras hdf5 convert to Tensorflow pb model
# _*_ coding:utf-8 _*_
# 定义层

from keras.models import load_model
import tensorflow as tf
import os
import os.path as osp
from keras import backend as K

# model path
input_path = 'checkpoint-128e-val_acc_0.99.hdf5'

from keras.models import load_model
import tensorflow as tf
from keras import backend as K
from tensorflow.python.framework import graph_io


def freeze_session(session, keep_var_names=None, output_names=None, clear_devices=True):
    from tensorflow.python.framework.graph_util import convert_variables_to_constants
    graph = session.graph
    with graph.as_default():
        freeze_var_names = list(set(v.op.name for v in tf.global_variables()).difference(keep_var_names or []))
        output_names = output_names or []
        output_names += [v.op.name for v in tf.global_variables()]
        input_graph_def = graph.as_graph_def()
        if clear_devices:
            for node in input_graph_def.node:
                node.device = ""
        frozen_graph = convert_variables_to_constants(session, input_graph_def,
                                                      output_names, freeze_var_names)
        return frozen_graph


if __name__ == "__main__":
    h5_model_path = 'checkpoint-128e-val_acc_0.99.hdf5'
    output_path = 'keras\\model\\/' 
    pb_model_name = 'pb_model.pb'  

   
    K.set_learning_phase(0)
    net_model = load_model(h5_model_path)

   
    sess = K.get_session()
    frozen_graph = freeze_session(K.get_session(), output_names=[net_model.output.op.name])
   
    graph_io.write_graph(frozen_graph, output_path, pb_model_name, as_text=False)






